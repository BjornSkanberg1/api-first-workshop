pipeline {
	
	agent {
		kubernetes {
    	label 'docker-builder'
    	defaultContainer 'jnlp'
    	yaml """
kind: Pod
spec:
  serviceAccountName: jenkins-agent-account
  containers:
  - name: jnlp
    workingDir: /tmp/jenkins
  - name: dind
    workingDir: /tmp/jenkins
    image: registry.k8s/kaniko:tini
    imagePullPolicy: Always
    restartPolicy: Never
    command: 
    - /busybox/cat
    tty: true
    volumeMounts:
    - name: jenkins-docker-cfg
      mountPath: /kaniko/.docker
    - name: tmp-dir
      mountPath: /wm-installer
  volumes:
  - name: tmp-dir
    hostPath:
      path: "/tmp/license"
  - name: jenkins-docker-cfg
    projected:
      sources:
      - secret:
          name: regcred 
          items:
            - key: .dockerconfigjson
              path: config.json 
"""
		}
	}

  parameters{

		credentials(credentialType: 'com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl', 
			defaultValue: '', description: 'Empower credentials ', name: 'EMPOWER_CREDENTIALS', required: true)
      string(name: 'REGISTRY_INGRESS', defaultValue: 'registry.k8s', description: 'Endpoint of the docker registry')
	}

	environment {
		PACKAGE="MSRBaseImage"
		BUILDER_TAG = "10.11"
    CONTAINER_TAG = "10.11"
		REGISTRY = "${params.REGISTRY_INGRESS}"
    REG = "https://${REGISTRY}"
		EMPOWER_CREDS = credentials('EMPOWER_CREDENTIALS')
    }

    stages {
      stage('Prepare') {
        steps {
				  container(name: 'dind', shell: '/bin/sh') {
            sh '''#!/bin/sh
            cp /wm-installer/SoftwareAGInstaller.bin ${PACKAGE}/.
            cp /wm-installer/ISLicense.xml ${PACKAGE}/.
            cp /wm-installer/WmTestSuite100.xml ${PACKAGE}/.
            cd ${PACKAGE}
            chmod +x SoftwareAGInstaller.bin
            sed -i 's/%EMPOWER_USER%/'$EMPOWER_CREDS_USR'/g' createIsImage.script
            sed -i 's/%EMPOWER_PASSWORD%/'$EMPOWER_CREDS_PSW'/g' createIsImage.script
            '''
          }
        }

      }
		
      stage('Build') {
			  steps {
				  container(name: 'dind', shell: '/busybox/sh') {
            sh '''#!/busybox/sh
            /kaniko/executor --context ${PACKAGE} \
              --destination ${REGISTRY}/microservice-runtime-tcdb:${CONTAINER_TAG} \
              --destination ${REGISTRY}/microservice-runtime-tcdb:${CONTAINER_TAG}.${BUILD_NUMBER} \
              --destination ${REGISTRY}/microservice-runtime-tcdb:latest \
              --insecure-registry ${REGISTRY} \
              --build-arg BUILDER_IMAGE=redhat/ubi8 \
              --build-arg BASE_IMAGE=redhat/ubi8
            '''
          }
				}
			}
		}
  }

