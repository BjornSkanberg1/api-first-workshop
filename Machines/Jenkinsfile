pipeline {
    agent {
		node {
			label 'wm-jenkins-slave'
		}
	}
	
	environment {
        JAVA_HOME = "/opt/softwareag/jvm/jvm"
		PACKAGE = "Machines"
		NAMESPACE = "api-hip-workshop"
		REGISTRY = "registry.daehpresal44966.hycloud.softwareag.com"
		CONTAINER = "machine-status-api"
		CONTAINER_TAG = "${env.CONTAINER}:latest"
    }

    stages {
        stage('Build'){
            steps {
				container('wm-jenkins-slave') {
					sh 'chmod -R 777 ${WORKSPACE}'
					sh '/opt/softwareag/common/lib/ant/bin/ant -f ${WORKSPACE}/${PACKAGE}/prepareBuild.xml prep'
					sh 'cd ${WORKSPACE}/${PACKAGE}; /opt/softwareag/common/AssetBuildEnvironment/bin/build.sh -propertyfile build.properties'
				}
			}
		}
		
		stage('Deploy') {
			steps {
				container('wm-jenkins-slave') {
					timeout(120) {
						waitUntil {
							script {
								def r = sh script: 'wget -q --user Administrator --password manage http://localhost:5555 -O /dev/null', returnStatus: true
								return (r == 0);
							}
						}
					}
					sh 'cp ${WORKSPACE}/${PACKAGE}/config/substitutionVars.xml /opt/softwareag/IntegrationServer/instances/default/packages/WmDeployer/replicate/inbound/;\
						cd /opt/softwareag/IntegrationServer/instances/default/packages/WmDeployer/bin;\
						./projectautomatorUnix.sh ${WORKSPACE}/${PACKAGE}/build/project-deploy.xml;\
						./Deployer.sh --deploy -force -dc myDeployment -project ACDL_MSR_PACKAGES -host localhost -port 5555 -user Administrator -pwd manage'
				}
			}
		}
		
		stage('Test') {
			steps {
				container('wm-jenkins-slave') {
					sh 'cd ${WORKSPACE}/${PACKAGE}/test; \
						/opt/softwareag/common/lib/ant/bin/ant -f run-composite-runner.xml -propertyfile run-test.properties composite-runner-all-tests'
					junit '**/build/test/reports/*.xml'
				}
			}
		}
		
		stage('Build and push container') {
			steps {
				container('wm-jenkins-slave') {
				
					sh 'cd ${PACKAGE}/build/container; \
						cp -r /opt/softwareag/IntegrationServer/instances/default/packages/${PACKAGE} .'
					
						
					script {
						docker.withRegistry("https://${REGISTRY}") {
					
							def customImage = docker.build("${env.CONTAINER_TAG}", "${PACKAGE}/build/container")

							/* Push the container to the custom Registry */
							customImage.push()
						}
					}
				}
			}
		}
	
		stage('Deploy-Container'){
            steps {
				container('wm-jenkins-slave') {
					withKubeConfig([credentialsId: 'systemadmin', serverUrl: 'https://kubernetes.default']) {
						sh 'kubectl apply -f ${PACKAGE}/deployment/${CONTAINER}-DC.yml'
				
						script {
							try {
								sh 'kubectl get service ${CONTAINER}-service'
							} catch (exc) {
								echo 'Service does not exist yet'
								sh 'kubectl apply -f ${PACKAGE}/deployment/${CONTAINER}-service-route.yml'
							}
						}
					}
				}
            }
        }
	}
}
