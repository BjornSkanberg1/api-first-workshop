pipeline {
	
	agent {
		kubernetes {
    	label 'docker-builder'
    	defaultContainer 'jnlp'
    	yaml """
kind: Pod
spec:
  serviceAccountName: jenkins-agent-account
  containers:
  - name: jnlp
    workingDir: /tmp/jenkins
  - name: kaniko
    workingDir: /tmp/jenkins
    image: gcr.io/kaniko-project/executor:debug
    imagePullPolicy: Always
    restartPolicy: Never
    command: 
    - /busybox/cat
    tty: true
    volumeMounts:
    - name: jenkins-docker-cfg
      mountPath: /kaniko/.docker
  volumes:
  - name: jenkins-docker-cfg
    projected:
      sources:
      - secret:
          name: docker-credentials 
          items:
            - key: .dockerconfigjson
              path: config.json 
"""
		}
	}
	
	environment {
        JAVA_HOME = "/opt/softwareag/jvm/jvm"
		PACKAGE = "Products"
		NAMESPACE = "api-first-workshop"
		REGISTRY = "docker-registry.registry:5000"
		CONTAINER = "products-api"
		CONTAINER_TAG = "1.0"
    }

    stages {
        stage('Prepare'){
            steps {
					dir("${PACKAGE}") {
						sh 'mkdir build \
						  build/repo \
						  build/container \
						  dist'
						sh 'mv config build/container'

					}
			}
		}

		stage('Build') {
			steps {
				sh 'cd ${PACKAGE}/build/container; \
					cp -r ${WORKSPACE}/${PACKAGE}/src/IS/{${PACKAGE},ConnectedDemos,ConnectedDemosTCDB} .;'
				sh '''#!/busybox/sh
					/kaniko/executor --context ${PACKAGE} \
						--destination ${REG}/${CONTAINER}-API:${TAG} \
            			--destination ${REG}/${CONTAINER}-API:${TAG}.${BUILD_NUMBER} \
            			--destination ${REG}/${CONTAINER}-API:latest \
						--insecure-registry ${REG} \
						--build-arg PACKAGE=${PACKAGE} \
						--build-arg BASE_IMAGE=${REG}/microservice-runtime-tcdb:latest
					'''
			}
		}
		
		stage('Test') {
			steps {
				container(name: 'kaniko', shell: '/busybox/sh') {
					sh 'cd ${WORKSPACE}/${PACKAGE}/test; \
						/opt/softwareag/common/lib/ant/bin/ant -f run-composite-runner.xml -propertyfile run-test.properties composite-runner-all-tests'
					junit '**/build/test/reports/*.xml'
				}
			}
		}

		stage('Deploy-Container'){
            steps {
				container(name: 'kaniko', shell: '/busybox/sh') {
					withKubeConfig([credentialsId: 'systemadmin', serverUrl: 'https://kubernetes.default']) {
						sh 'kubectl apply -f ${PACKAGE}/deployment/${CONTAINER}-DC.yml'
				
						script {
							try {
								sh 'kubectl -n ${NAMESPACE} get service ${CONTAINER}-service'
							} catch (exc) {
								echo 'Service does not exist yet'
								sh 'kubectl apply -f ${PACKAGE}/deployment/${CONTAINER}-service-route.yml'
							}
						}
					}
				}
            }
        }
    }
}
